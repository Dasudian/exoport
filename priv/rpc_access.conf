%% -*- erlang -*-
%%
%% Configuration file for rpc calls to the rfZone application
%%

%% Typedefs:
%%    mod()     :: atom().
%%    fun()     :: atom().
%%    arity()   :: integer().
%%    mfa()     :: {mod(), fun(), arity()}.
%%
%% Redirects: It is really best to have an erlang module with the same
%% name as the YANG module in which the RPCs are defined. This is not
%% always possible, though.
%%
%% Format: {redirect, [ {FromMod :: mod(), ToMod :: mod()} |
%%                      {FromMFA :: mfa(), ToMFA :: mfa()} }].
%%
%% If a fully qualified MFA redirect matches, the rest of the list
%% is not checked. After a module substitution, the remainder of the
%% list is checked using the new module target.
%%
%% Direct entries: Module :: mod() | mfa().
%%
%% Dynamic check: {verify, {Mv :: mod(), Fv :: fun()}}.
%%
%% The function Mv:Fv(M, F, A) -> continue | false | mfa()
%% is called. If it returns 'continue', the rest of the list is checked.
%%
{redirect, [{rfzone, rfzone_srv}
	   %% also insert redirects for the std config RPCs here
	   ]}.
{rfzone_srv, analog_input, 3}.
{rfzone_srv, digital_input, 3}.
{rfzone_srv, item_configuration, 2}.
{rfzone_srv, configure_item, 3}.
{rfzone_srv, device_configuration, 0}.
{rfzone_srv, configure_device, 1}.

